// Code generated by MockGen. DO NOT EDIT.
// Source: ./factory.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	config "github.com/axle-h/ddns/config"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFactory is a mock of Factory interface
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Dns mocks base method
func (m *MockFactory) Dns() config.Dns {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dns")
	ret0, _ := ret[0].(config.Dns)
	return ret0
}

// Dns indicates an expected call of Dns
func (mr *MockFactoryMockRecorder) Dns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dns", reflect.TypeOf((*MockFactory)(nil).Dns))
}

// IpScrape mocks base method
func (m *MockFactory) IpScrape() config.IpScrape {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IpScrape")
	ret0, _ := ret[0].(config.IpScrape)
	return ret0
}

// IpScrape indicates an expected call of IpScrape
func (mr *MockFactoryMockRecorder) IpScrape() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpScrape", reflect.TypeOf((*MockFactory)(nil).IpScrape))
}
